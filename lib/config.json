{
    "services": [
        {
            "name": "HTTP service",
            "description": "Returns the supplied status code and response message",
            "type": "http",
            "GET": {
				"path": "/http",
                "params": {
                    "statusCode": 200,
                    "response": "Hello!"
                }
            },
            "POST": {
				"path": "/http",
                "params": {
                    "statusCode": 204
                }
            },
            "PUT": {
				"path": "/http",
                "params": {
                    "statusCode": 200,
                    "response": {
						"response":"OK"
					},
					"contentType": "application/json; charset=UTF-8"
                }
            },
            "DELETE": {
				"path": "/http",
                "params": {
                    "statusCode": 404,
                    "response": "Not Found"
                }
            }
        },
        {
            "name": "File HTTP service",
            "description": "Returns the supplied status code and file-based response message",
            "type": "http",
            "GET": {
				"path": "/http/file",
                "params": {
                    "statusCode": 200,
                    "file": "hello.txt",
					"contentType": "text/plain"
                }
            }
        },
        {
            "name": "Echo service",
            "description": "Echoes the request body for POST/PUT, and the requested URL for GET/DELETE",
            "type": "echo",
            "ALL": {
	            "path": "/echo"
            }
        },
        {
            "name": "Redirect service",
            "description": "Redirects the caller to the supplied URL",
            "type": "redirect",
            "ALL": {
                "path": "/redirect",
                "params": {
                    "url": "http://google.com"
                }
            }
        },
        {
            "name": "Capture service",
            "description": "Redirects the caller to the supplied URL",
            "type": "redirect",
            "ALL": {
                "path": "/redirect",
                "params": {
                    "url": "http://google.com"
                }
            }
        },
        {
            "name": "RabbitMQ (AMQP) User Creator",
            "description" : "Creates a user",
			"type": "amqp_user",
            "PUT": {
	            "path": "/amqp/user",
                "params" : {
                    "host": "127.0.0.1",
					"port": 15672,
					"user": "admin:admin",
					"username": "admin",
					"password": "admin",
					"tag": "administrator"
                }
            }
        },
        {
            "name": "RabbitMQ (AMQP) VHost Creator",
            "description" : "Creates a vhost",
			"type": "amqp_vhost",
            "PUT": {
	            "path": "/amqp/vhost",
                "params" : {
                    "host": "127.0.0.1",
					"port": 15672,
					"user": "admin:admin",
					"vhost": "syndication"
                }
            }
        },
        {
            "name": "RabbitMQ (AMQP) VHost User Permissions",
            "description" : "Gives a user vhost permissions",
            "type": "amqp_vhost_user",
            "POST": {
	            "path": "/amqp/vhost/user",
                "params" : {
                    "host": "127.0.0.1",
					"port": 15672,
					"user": "admin:admin",
					"vhost": "syndication",
					"username": "admin"
                }
            }
        },
        {
            "name": "RabbitMQ (AMQP) Exchange Creator",
            "description" : "Creates an exchange on the specified vhost",
            "type": "amqp_exchange",
            "PUT": {
	            "path": "/amqp/exchange",
                "params" : {
                    "host": "127.0.0.1",
					"port": 15672,
					"user": "admin:admin",
					"vhost": "syndication",
                    "exchange": "syndication"
                }
            }
        },
        {
            "name": "RabbitMQ (AMQP) Queue Creator",
            "description" : "Creates a queue on the specified vhost",
            "type": "amqp_queue",
            "PUT": {
	            "path": "/amqp/queue",
                "params" : {
                    "host": "127.0.0.1",
					"port": 15672,
					"user": "admin:admin",
					"vhost": "syndication",
                    "queue": "syndicated.content"
                }
            }
        },
        {
            "name": "RabbitMQ (AMQP) Exchange->Queue Binding",
            "description" : "Binds a queue to an exchange using the specified routing key",
            "type": "amqp_bind",
            "POST": {
	            "path": "/amqp/bind",
                "params" : {
                    "host": "127.0.0.1",
					"port": 15672,
					"user": "admin:admin",
					"vhost": "syndication",
					"exchange": "syndication",
                    "queue": "syndicated.content",
					"routingKey": "update"
                }
            }
        },
        {
            "name": "RabbitMQ (AMQP) Message Publisher",
            "description" : "Publishes a message on the specified vhost/exchange",
            "type": "amqp_publish",
            "POST": {
	            "path": "/amqp/publish",
                "params" : {
                    "host": "127.0.0.1",
					"port": 15672,
					"user": "admin:admin",
					"vhost": "syndication",
                    "exchange": "syndication",
                    "routingKey": "update",
					"payload": "Hello!",
					"payloadEncoding": "string"
                }
            }
        },
        {
            "name": "RabbitMQ (AMQP) File Message Publisher",
            "description" : "Publishes a message on the specified vhost/exchange",
            "type": "amqp_publish",
            "POST": {
	            "path": "/amqp/publish/file",
                "params" : {
                    "host": "127.0.0.1",
					"port": 15672,
					"user": "admin:admin",
					"vhost": "syndication",
                    "exchange": "syndication",
                    "routingKey": "update",
					"file": "hello.txt",
					"payloadEncoding": "string"
                }
            }
        }
    ]
}