{
    "services": [
        {
            "name": "HTTP service",
            "description": "Returns the supplied status code and response message",
            "type": "http",
            "GET": [
                {
                    "path": "/http/hello",
                    "params": {
                        "statusCode": 200,
                        "response": "Hello!"
                    }
                },
                {
                    "path": "/http/goodbye",
                    "params": {
                        "statusCode": 200,
                        "response": "Goodbye!"
                    }
                }
            ],
            "POST": {
                "path": "/http",
                "params": {
                    "statusCode": 204
                }
            },
            "PUT": {
                "path": "/http",
                "params": {
                    "statusCode": 200,
                    "response": {
                        "response": "OK"
                    },
                    "headers": {
                        "Content-Type": "application/json; charset=UTF-8"
                    }
                }
            },
            "DELETE": {
                "path": "/http",
                "params": {
                    "statusCode": 404,
                    "response": "Not Found"
                }
            }
        },
        {
            "name": "Secure echo service",
            "description": "An ECHO service that is expecting an Authorization header with an API key",
            "type": "echo",
            "POST": {
                "path": "/secure/echo",
                "params": {
                    "apiKey": "api_key"
                }
            }
        },
        {
            "name": "API Key Client Test Service",
            "description": "Calls the specified REST service and includes the required API Key header",
            "type": "api_key_test",
            "GET": {
                "path": "/api/key/test",
                "params": {
                    "prefix": "http",
                    "host": "localhost",
                    "port": 3000,
                    "resource": "/secure/echo",
                    "key": "api_key",
                    "entityName": "client",
                    "timeout": "2000",
                    "data": {
                        "message": "Hello!"
                    },
                    "contentType": "application/json",
                    "method": "POST"
                }
            }
        },
        {
            "name": "File HTTP service",
            "description": "Returns the supplied status code and file-based response message",
            "type": "http",
            "GET": {
                "path": "/http/file",
                "params": {
                    "statusCode": 200,
                    "file": "lots_of.txt",
                    "headers": {
                        "Content-Type": "text/plain"
                    }
                }
            }
        },
        {
            "name": "Logger service",
            "description": "Logs information about the request",
            "type": "logger",
            "ALL": {
                "path": "/logger"
            }
        },
        {
            "name": "Echo service",
            "description": "Echoes the request body for POST/PUT, and the requested URL for GET/DELETE",
            "type": "echo",
            "ALL": {
                "path": "/echo"
            }
        },
        {
            "name": "Redirect service",
            "description": "Redirects the caller to the supplied URL",
            "type": "redirect",
            "ALL": {
                "path": "/redirect",
                "params": {
                    "url": "http://google.com"
                }
            }
        },
        {
            "name": "Match service",
            "description": "Responds conditionally based on a matching url string, body string or header key/value",
            "type": "match",
            "GET": {
                "path": "/match",
                "params": {
                    "urlMatch": [
                        {
                            "string": "ham=cheese",
                            "statusCode": 200,
                            "response": {
                                "yes": "please"
                            },
                            "headers": {
                                "Content-Type": "application/json; charset=UTF-8"
                            }
                        },
                        {
                            "string": "?peanutButter",
                            "statusCode": 204
                        }
                    ]
                }
            },
            "POST": {
                "path": "/match",
                "params": {
                    "bodyMatch": [
                        {
                            "string": "hamAndCheese",
                            "statusCode": 200,
                            "file": "hello.txt"
                        },
                        {
                            "string": "baconLettuceAndTomato",
                            "statusCode": 200,
                            "response": "yes please!"
                        }
                    ]
                }
            },
            "PUT": {
                "path": "/match",
                "params": {
                    "headerMatch": [
                        {
                            "key": "Ham",
                            "value": "Cheese",
                            "statusCode": 200,
                            "file": "hello.txt"
                        }
                    ]
                }
            }
        },
        {
            "name": "RabbitMQ (AMQP) User Creator",
            "description": "Creates a user",
            "type": "amqp_user",
            "PUT": {
                "path": "/amqp/user",
                "params": {
                    "host": "127.0.0.1",
                    "port": 15672,
                    "user": "admin:admin",
                    "username": "admin",
                    "password": "admin",
                    "tag": "administrator"
                }
            }
        },
        {
            "name": "RabbitMQ (AMQP) VHost Creator",
            "description": "Creates a vhost",
            "type": "amqp_vhost",
            "PUT": {
                "path": "/amqp/vhost",
                "params": {
                    "host": "127.0.0.1",
                    "port": 15672,
                    "user": "admin:admin",
                    "vhost": "syndication"
                }
            }
        },
        {
            "name": "RabbitMQ (AMQP) VHost User Permissions",
            "description": "Gives a user vhost permissions",
            "type": "amqp_vhost_user",
            "POST": {
                "path": "/amqp/vhost/user",
                "params": {
                    "host": "127.0.0.1",
                    "port": 15672,
                    "user": "admin:admin",
                    "vhost": "syndication",
                    "username": "admin"
                }
            }
        },
        {
            "name": "RabbitMQ (AMQP) Exchange Creator",
            "description": "Creates an exchange on the specified vhost",
            "type": "amqp_exchange",
            "PUT": {
                "path": "/amqp/exchange",
                "params": {
                    "host": "127.0.0.1",
                    "port": 15672,
                    "user": "admin:admin",
                    "vhost": "syndication",
                    "exchange": "syndication"
                }
            }
        },
        {
            "name": "RabbitMQ (AMQP) Queue Creator",
            "description": "Creates a queue on the specified vhost",
            "type": "amqp_queue",
            "PUT": {
                "path": "/amqp/queue",
                "params": {
                    "host": "127.0.0.1",
                    "port": 15672,
                    "user": "admin:admin",
                    "vhost": "syndication",
                    "queue": "syndicated.content"
                }
            }
        },
        {
            "name": "RabbitMQ (AMQP) Exchange->Queue Binding",
            "description": "Binds a queue to an exchange using the specified routing key",
            "type": "amqp_bind",
            "POST": {
                "path": "/amqp/bind",
                "params": {
                    "host": "127.0.0.1",
                    "port": 15672,
                    "user": "admin:admin",
                    "vhost": "syndication",
                    "exchange": "syndication",
                    "queue": "syndicated.content",
                    "routingKey": "update"
                }
            }
        },
        {
            "name": "RabbitMQ (AMQP) Message Publisher",
            "description": "Publishes a message on the specified vhost/exchange",
            "type": "amqp_publish",
            "POST": {
                "path": "/amqp/publish",
                "params": {
                    "host": "127.0.0.1",
                    "port": 15672,
                    "user": "admin:admin",
                    "vhost": "syndication",
                    "exchange": "syndication",
                    "routingKey": "update",
                    "payload": {
                        "message": "Hello!"
                    },
                    "payloadEncoding": "string"
                }
            }
        },
        {
            "name": "RabbitMQ (AMQP) File Message Publisher",
            "description": "Publishes a message on the specified vhost/exchange",
            "type": "amqp_publish",
            "POST": {
                "path": "/amqp/publish/file",
                "params": {
                    "host": "127.0.0.1",
                    "port": 15672,
                    "user": "admin:admin",
                    "vhost": "syndication",
                    "exchange": "syndication",
                    "routingKey": "update",
                    "file": "hello.json",
                    "payloadEncoding": "string"
                }
            }
        }
    ]
}
